name: Run Kaggle Notebook
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/kaggle-scheduler.yml'
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

jobs:
  run-notebook:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Keep Repository Active
        run: |
          mkdir -p .github
          echo "Last run: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > .github/last-run.txt
          echo "Trigger: ${{ github.event_name }}" >> .github/last-run.txt
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add .github/last-run.txt
          if ! git diff --staged --quiet; then
            git commit -m "ü§ñ Run: $(date -u +%Y-%m-%d-%H%M)"
            git push
          fi
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Kaggle CLI
        run: pip install --quiet kaggle
      
      - name: Configure Kaggle Credentials
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"shreevathsbbhh","key":"46675a9b7dbf9ee364dccd62b33c1354"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
      
      - name: Pull Notebook from Kaggle
        run: |
          echo "üì• Pulling notebook..."
          kaggle kernels pull shreevathsbbhh/new-6 -p ./notebook -m
          if [ ! -f "./notebook/new-6.ipynb" ]; then
            echo "‚ùå Failed to download"
            exit 1
          fi
      
      - name: Modify Notebook with Timestamp
        run: |
          cd ./notebook
          python3 << 'EOF'
          import json
          from datetime import datetime
          import os
          
          with open('new-6.ipynb', 'r', encoding='utf-8') as f:
              notebook = json.load(f)
          
          trigger = os.environ.get('GITHUB_EVENT_NAME', 'unknown')
          run_num = os.environ.get('GITHUB_RUN_NUMBER', '0')
          now = datetime.utcnow()
          
          timestamp_cell = {
              "cell_type": "code",
              "execution_count": None,
              "metadata": {},
              "outputs": [],
              "source": [
                  f"# Automated run triggered at {now.isoformat()}\n",
                  "import datetime\n",
                  f"print('Notebook execution started at: {now}')\n",
                  "print('This run was triggered automatically')"
              ]
          }
          
          notebook['cells'].insert(0, timestamp_cell)
          
          with open('new-6.ipynb', 'w', encoding='utf-8') as f:
              json.dump(notebook, f, indent=2, ensure_ascii=False)
          
          print(f"‚úÖ Modified at {now.strftime('%H:%M:%S')} UTC")
          EOF
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
      
      - name: Get Existing Metadata with Datasets
        run: |
          cd ./notebook
          echo "üì• Downloading existing metadata..."
          kaggle kernels metadata shreevathsbbhh/new-6 -p .
          if [ -f "kernel-metadata.json" ]; then
            echo "‚úÖ Metadata preserved with datasets"
          else
            echo "‚ö†Ô∏è Creating new metadata"
            cat > kernel-metadata.json << 'METADATA'
            {
              "id": "shreevathsbbhh/new-6",
              "title": "new-6",
              "code_file": "new-6.ipynb",
              "language": "python",
              "kernel_type": "notebook",
              "is_private": false,
              "enable_gpu": false,
              "enable_tpu": false,
              "enable_internet": true,
              "dataset_sources": [],
              "competition_sources": [],
              "kernel_sources": []
            }
            METADATA
          fi
      
      - name: Push Notebook to Kaggle
        run: |
          cd ./notebook
          echo "üì§ Pushing to Kaggle..."
          kaggle kernels push
          if [ $? -eq 0 ]; then
            echo "‚úÖ Push successful"
          else
            echo "‚ùå Push failed"
            exit 1
          fi
      
      - name: Verify Execution
        run: |
          sleep 20
          kaggle kernels status shreevathsbbhh/new-6 || true
          echo "‚úÖ Complete"
          echo "üîó https://www.kaggle.com/code/shreevathsbbhh/new-6"
      
      - name: Summary
        if: always()
        run: |
          echo "## Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Run:** 30 minutes" >> $GITHUB_STEP_SUMMARY
