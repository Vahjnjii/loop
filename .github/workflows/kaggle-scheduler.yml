name: Run Kaggle Notebook
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/kaggle-scheduler.yml'
  schedule:
    - cron: '*/11 * * * *'  # ‚è∞ RUNS EVERY 11 MINUTES (for testing)
  workflow_dispatch:

jobs:
  run-notebook:
    runs-on: ubuntu-latest
    
    steps:
      # STEP 1: Get the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # STEP 2: Keep repository active (prevents GitHub from disabling schedule)
      - name: Keep Repository Active
        run: |
          mkdir -p .github
          echo "Last automated run: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > .github/last-run.txt
          echo "Run count: $(git rev-list --count HEAD 2>/dev/null || echo 0)" >> .github/last-run.txt
          echo "Trigger type: ${{ github.event_name }}" >> .github/last-run.txt
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add .github/last-run.txt
          
          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "ü§ñ Test run: $(date -u +%Y-%m-%d-%H%M)"
            git push
            echo "‚úÖ Repository activity logged"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi
      
      # STEP 3: Install Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # STEP 4: Install Kaggle CLI tool
      - name: Install Kaggle CLI
        run: |
          pip install --quiet kaggle
          echo "‚úÖ Kaggle CLI installed"
      
      # STEP 5: Configure Kaggle credentials
      - name: Configure Kaggle Credentials
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"shreevathsbbhh","key":"46675a9b7dbf9ee364dccd62b33c1354"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "‚úÖ Kaggle credentials configured"
      
      # STEP 6: Download current notebook from Kaggle
      - name: Pull Notebook from Kaggle
        run: |
          echo "========================================="
          echo "üì• PULLING NOTEBOOK FROM KAGGLE"
          echo "‚è∞ Test Mode: Running every 11 minutes"
          echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Trigger: ${{ github.event_name }}"
          echo "========================================="
          
          kaggle kernels pull shreevathsbbhh/new-6 -p ./notebook -m
          
          if [ -f "./notebook/new-6.ipynb" ]; then
            echo "‚úÖ Notebook downloaded successfully"
          else
            echo "‚ùå Failed to download notebook"
            exit 1
          fi
      
      # STEP 7: Modify notebook to create a new version
      - name: Modify Notebook with Timestamp
        run: |
          cd ./notebook
          
          echo "üîß Adding timestamp to notebook..."
          
          python3 << 'EOF'
          import json
          from datetime import datetime
          import os
          
          # Read the notebook
          with open('new-6.ipynb', 'r', encoding='utf-8') as f:
              notebook = json.load(f)
          
          # Get trigger type from environment
          trigger_type = os.environ.get('GITHUB_EVENT_NAME', 'unknown')
          run_number = os.environ.get('GITHUB_RUN_NUMBER', '0')
          current_time = datetime.utcnow()
          
          # Create a timestamp cell
          timestamp_cell = {
              "cell_type": "code",
              "execution_count": None,
              "metadata": {},
              "outputs": [],
              "source": [
                  f"# üß™ TEST MODE - Running Every 11 Minutes\n",
                  f"# ‚è∞ Triggered at: {current_time.strftime('%Y-%m-%d %H:%M:%S')} UTC\n",
                  f"# üìä Trigger type: {trigger_type}\n",
                  f"# üî¢ Run number: {run_number}\n",
                  "\n",
                  "import datetime\n",
                  "print('='*60)\n",
                  "print('üß™ TEST MODE: Notebook runs every 11 minutes')\n",
                  f"print('‚è∞ Started at:', datetime.datetime.now())\n",
                  f"print('üìä Trigger: {trigger_type}')\n",
                  f"print('üî¢ Run #{run_number}')\n",
                  "print('='*60)\n",
                  "print('\\n‚úÖ This is a test run to verify automation works!')\n",
                  "print('‚ö†Ô∏è Remember to change back to 6-hour schedule after testing\\n')\n"
              ]
          }
          
          # Insert at the beginning
          notebook['cells'].insert(0, timestamp_cell)
          
          # Save the modified notebook
          with open('new-6.ipynb', 'w', encoding='utf-8') as f:
              json.dump(notebook, f, indent=2, ensure_ascii=False)
          
          print("‚úÖ Notebook modified with timestamp cell")
          print(f"   Total cells: {len(notebook['cells'])}")
          print(f"   Test run at: {current_time.strftime('%H:%M:%S')} UTC")
          EOF
          
          echo "‚úÖ Modification complete"
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
      
      # STEP 8: Create metadata file for Kaggle
      - name: Create Kernel Metadata
        run: |
          cd ./notebook
          
          cat > kernel-metadata.json << 'METADATA'
          {
            "id": "shreevathsbbhh/new-6",
            "title": "new-6",
            "code_file": "new-6.ipynb",
            "language": "python",
            "kernel_type": "notebook",
            "is_private": false,
            "enable_gpu": false,
            "enable_tpu": false,
            "enable_internet": true,
            "dataset_sources": [],
            "competition_sources": [],
            "kernel_sources": []
          }
          METADATA
          
          echo "‚úÖ Metadata file created"
      
      # STEP 9: Push notebook back to Kaggle (triggers execution)
      - name: Push Notebook to Kaggle
        run: |
          cd ./notebook
          
          echo "========================================="
          echo "üì§ PUSHING NOTEBOOK TO KAGGLE"
          echo "üß™ TEST MODE: Every 11 minutes"
          echo "This will trigger a new execution"
          echo "========================================="
          
          kaggle kernels push
          
          if [ $? -eq 0 ]; then
            echo "========================================="
            echo "‚úÖ NOTEBOOK PUSHED SUCCESSFULLY!"
            echo "üöÄ New execution should start on Kaggle"
            echo "‚è∞ Next test run: 11 minutes from now"
            echo "========================================="
          else
            echo "‚ùå Failed to push notebook"
            exit 1
          fi
      
      # STEP 10: Wait and check status
      - name: Verify Kaggle Execution
        run: |
          echo "‚è≥ Waiting 20 seconds for Kaggle to process..."
          sleep 20
          
          echo "üìä Checking notebook status..."
          kaggle kernels status shreevathsbbhh/new-6 || echo "Status check completed"
          
          echo ""
          echo "========================================="
          echo "‚úÖ TEST RUN COMPLETED"
          echo "========================================="
          echo "üîó Notebook: https://www.kaggle.com/code/shreevathsbbhh/new-6"
          echo "üìä Check versions tab to see new execution"
          echo ""
          echo "‚è∞ NEXT TEST RUN: 11 minutes from now"
          echo "üß™ Running in TEST MODE"
          echo ""
          echo "‚ö†Ô∏è  IMPORTANT: After testing, change cron back to:"
          echo "    cron: '15 */6 * * *'"
          echo "========================================="
      
      # STEP 11: Create execution summary
      - name: Create Execution Summary
        if: always()
        run: |
          echo "## üß™ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è RUNNING IN TEST MODE - Every 11 Minutes**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Kaggle Notebook](https://www.kaggle.com/code/shreevathsbbhh/new-6)" >> $GITHUB_STEP_SUMMARY
          echo "- [Notebook Versions](https://www.kaggle.com/code/shreevathsbbhh/new-6/versions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚è∞ Next Test Run" >> $GITHUB_STEP_SUMMARY
          echo "**11 minutes** from this run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö†Ô∏è Remember" >> $GITHUB_STEP_SUMMARY
          echo "After testing, change the cron schedule back to:" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          echo "schedule:" >> $GITHUB_STEP_SUMMARY
          echo "  - cron: '15 */6 * * *'  # Every 6 hours" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
